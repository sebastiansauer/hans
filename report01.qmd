---
title: "Analyse der Matoma-HaNS-Daten"
date: now
author: Sebastian Sauer

toc: true
number-sections: true

format: 
  html:
    theme: lumen
    embed-resources: true
    toc: true
    toc-location: right
    toc-depth: 3
    number-sections: true
    code-fold: true
    code-summary: "Show the code"
    code-tools: true
    
execute: 
  warning: false
  cache: false
---


# Setup

## R-Pakete starten



```{r load-libs}
library(targets)
library(tidyverse)
library(ggokabeito)
library(easystats)
library(gt)
library(ggfittext)
library(scales)
library(visdat)
```

```{r}
theme_set(theme_minimal())
```


## Roh-Daten laden und inspizieren (data_all_fact)


JSON-Daten wurden nicht importiert, da offenbar nur redundante Daten enthalten sind.




```{r load-data-all-f}
tar_load(data_all_fct)
```


### Dimension

Der Roh-Datensatz verfügt über

- `r nrow(data_all_fct)` Zeilen
- `r ncol(data_all_fct)` Spalten (Dubletten und Spalten mit Bildern bereits entfernt)

Jede Zeile entspricht einem "Visit".


### Erster Blick


```{r}
data_all_fct_head100 <- 
data_all_fct %>% 
  select(1:100) %>% 
  slice_head(n = 100) 
```


```{r vis-dat}
data_all_fct_head100 %>% 
  visdat::vis_dat()
```


### Namen (1-100)

```{r}
data_all_fct_head100 %>% 
  names()
```


### Werte der erst 100 Spalten

```{r}
data_all_fct_head100 %>% 
  glimpse()
```



### Datensatz data_slim, Zeilen 1-100

```{r}
tar_load(data_slim)

data_slim %>% 
  slice(1:100) |> 
  gt()
```


## Datensatz nur User

Entfernt man Developer, Admins und Lecturers aus dem Roh-Datensatz so bleiben weniger Zeilen übrig:



```{r load-data-users-only}
tar_load(data_users_only)
```


- `r nrow(data_users_only)` Zeilen
- `r ncol(data_users_only)` Spalten 


  

## Datensatz mit Anzahl der Aktionen pro User

```{r load-count-action}
tar_load(count_action)
```


## Zeitraum 


### Beginn/Ende der Daten


```{r}
tar_load(config)
```


Laut `config.yaml` ist das **aktuelle Semester, d.h. `r config$this_semester`**.



```{r}
tar_load(time_minmax)
```


```{r time-min-max}
time_minmax |> 
  summarise(time_min = min(time_min),
            time_max = max(time_max)) |> 
  gt()
```

Diese Statistik wurde auf Basis des Datenobjekts `data_slim` berechnet.


### Days since last visit

```{r days-since-last-visit}
tar_load(time_since_last_visit)


time_since_last_visit <- 
time_since_last_visit |> 
  mutate(dayssincelastvisit = as.numeric(dayssincelastvisit)) 

time_since_last_visit |> 
  datawizard::describe_distribution(dayssincelastvisit) |> 
  knitr::kable()

time_since_last_visit |>
  ggplot(aes(x=dayssincelastvisit)) +
  geom_density()
```




## Statistiken

Die folgenden Statistiken beruhen auf dem Datensatz `data_slim`:


```{r}
glimpse(data_slim)
```
`nr` fasst die Nummer der Aktion innerhalb eines bestimmten Visits.


### Mit allen Daten (den 499er-Daten)



```{r}
count_action |> 
  describe_distribution(nr_max) |> 
  gt() |> 
  fmt_number(columns = where(is.numeric),
             decimals = 2)
```

`nr_max` gibt den Maximalwert von `nr` zurück, sagt also, wie viele Aktionen maximal von einem Visitor ausgeführt wurden.

Betrachtet man die Anzahl der Aktionen pro Visitor näher, so fällt auf, dass der Maximalwert (499) sehr häufig vorkommt:

```{r}
count_action |> 
  count(nr_max) |> 
  ggplot(aes(x = nr_max, y = n)) +
  geom_col()
```

Hier noch in einer anderen Darstellung:

```{r}
count_action |> 
  count(nr_max) |> 
  ggplot(aes(x = nr_max, y = n)) +
  geom_point()
```

Der Maximalwert ist einfach auffällig häufig:


```{r}
count_action |> 
  count(nr_max == 499) |> 
  gt()
```


Es erscheint plausibel, dass der Maximalwert alle "gekappten" (zensierten, abgeschnittenen) Werte fasst, also viele Werte, die eigentlich größer wären (aber dann zensiert wurden).

### Nur Visitors, für die weniger als 500 Aktionen protokolliert sind


```{r}
count_action2 <- 
count_action |> 
  filter(nr_max != 499) 

count_action2 |> 
  describe_distribution(nr_max) |> 
  gt() |> 
  fmt_number(columns = where(is.numeric),
             decimals = 2)
```

## Verteilung

### Mit den 499er-Daten

```{r plot-count-action}
count_action_avg = mean(count_action$nr_max)
count_action_sd = sd(count_action$nr_max)

count_action |> 
  ggplot() +
  geom_histogram(aes(x = nr_max)) +
  labs(x = "Anzahl von Aktionen pro Visit",
       y = "n",
       caption = "Der vertikale Strich zeigt den Mittelwert; der horizontale die SD") +
  theme_minimal() +
  geom_vline(xintercept = count_action_avg,
             color = palette_okabe_ito()[1]) +
  geom_segment(x = count_action_avg-count_action_sd,
               y = 0,
               xend = count_action_avg + count_action_sd,
               yend = 0,
               color = palette_okabe_ito()[2],
               size = 2) +
  annotate("label", x = count_action_avg, y = 1500, label = "MW") +
  annotate("label", x = count_action_avg + count_action_sd, y = 0, label = "SD")
  #geom_label(aes(x = count_action_avg), y = 1, label = "Mean")
```



- Mittelwert der Aktionen pro Visit: `r round(count_action_avg, 2)`.
- SD der Aktionen pro Visit: `r round(count_action_sd, 2)`.


### Ohne 499er-Daten

```{r plot-count-action-2}
count_action_avg2 = mean(count_action2$nr_max)
count_action_sd2 = sd(count_action2$nr_max)

count_action2 |> 
  ggplot() +
  geom_histogram(aes(x = nr_max)) +
  labs(x = "Anzahl von Aktionen pro Visit",
       y = "n",
       title = "Verteilung der User-Aktionen pro Visit",
       caption = "Der vertikale Strich zeigt den Mittelwert; der horizontale die SD") +
  theme_minimal() +
  geom_vline(xintercept = count_action_avg2,
             color = palette_okabe_ito()[1]) +
  geom_segment(x = count_action_avg-count_action_sd2,
               y = 0,
               xend = count_action_avg2 + count_action_sd2,
               yend = 0,
               color = palette_okabe_ito()[2],
               size = 2) +
  annotate("label", x = count_action_avg2, y = 1500, label = "MW", vjust = "top") +
  annotate("label", x = count_action_avg2 + count_action_sd2, y = 0, label = "SD", vjust = "bottom")
  #geom_label(aes(x = count_action_avg), y = 1, label = "Mean")
```



- Mittelwert der Aktionen pro Visit: `r round(count_action_avg2, 2)`.
- SD der Aktionen pro Visit: `r round(count_action_sd2, 2)`.


# Zeit pro Visit 

Die Visit-Zeit wurde auf 600 Min. trunkiert/begrenzt.

```{r load-time-spent}
tar_load(time_spent)
tar_load(time_duration)

time_spent <- 
  time_spent |> 
  mutate(t_min = as.numeric(time_diff, units = "mins")) |> 
  filter(t_min < 600)
```

## Verweildauer-Statistiken in Sekunden

```{r comp-diff-time-stats}
time_spent |> 
  summarise(
    mean_time_diff = round(mean(time_diff), 2),
    sd_time_diff = sd(time_diff),
    min_time_diff = min(time_diff),
    max_time_diff = max(time_diff)
  ) |> 
  summarise(
    mean_time_diff_avg = mean(mean_time_diff),
    sd_time_diff_avg = mean(sd_time_diff, na.rm = TRUE),
    min_time_diff_avg = mean(min_time_diff),
    max_time_diff_avg = mean(max_time_diff)
  ) |> 
  gt() |> 
  fmt_number(columns = everything(),
             decimals = 2)
```


```{r time-duration}
tar_load(time_duration)

time_duration |> 
  summarise(duration_sec_avg = mean(visitduration_sec, na.rm = TRUE))  |> 
  mutate(duration_min_avg = duration_sec_avg / 60)
```



## Verweildauer-Statistiken in Minuten

```{r time-spent-tbl}
time_spent |> 
  summarise(
    mean_t_min = mean(t_min),
    sd_t_min = sd(t_min),
    min_t_min = min(t_min),
    max_t_min = max(t_min)
  ) |> 
   summarise(
    mean_t_min_avg = mean(mean_t_min),
    sd_t_min_avg = mean(sd_t_min, na.rm = TRUE),
    min_t_min_avg = mean(min_t_min),
    max_t_min_avg = mean(max_t_min)
  ) |>
  gt() |> 
  fmt_number(columns = everything(),
             decimals = 2)
```

## Visualisierung der Verweildauer

### bins=20

```{r plot-time-spent1}
time_spent |> 
  ggplot(aes(x = t_min)) +
  geom_histogram() +
  scale_x_time() +
  theme_minimal() +
  labs(y = "n",
       x = "Verweildauer in HaNS pro Visit in Minuten")
```



### bins=100

```{r plot-time-spent2}
time_spent |> 
  ggplot(aes(x = t_min)) +
  geom_histogram(binwidth = 5) +
  theme_minimal() +
  labs(y = "n",
       x = "Verweildauer in Minuten",
       title = "Verweildauer in HaNS pro Visit",
       caption = "binwidth = 5 Min.")
```

### Zeitdauer begrenzt auf 1-120 Min.

```{r plot-time-spent3}
time_spent2 <- 
time_spent |> 
  filter(t_min > 1, t_min < 120) 

time_spent2 |> 
  ggplot(aes(x = t_min)) +
  geom_histogram(binwidth = 10) +
  theme_minimal() +
  labs(y = "n",
       x = "Verweildauer in HaNS pro Visit in Minuten",
       title = "Verweildauer begrenzt auf 1-120 Minuten",
       caption = "bindwidth = 10 Min.")
```



# Was machen die User?

```{r tar-load-count-action-type}
tar_load(count_action_type)
```


## Häufigkeiten

### Nach Kategorien

```{r category-tab}
count_action_type |> 
  count(category, sort = TRUE) |> 
  mutate(prop = round(n/sum(n), 2)) |> 
  gt()
```

### `eventcategory`

Was machen die Visitors eigentlich? Und wie oft?

```{r}
data_slim |> 
  filter(type == "eventcategory") |> 
  count(value, sort = TRUE) |> 
  gt()
```

## Verteilung

### Rohwerte

```{r vis-count-action-type}
count_action_type |> 
  count(category, sort = TRUE) |> 
  ggplot(aes(y = reorder(category, n), x = n)) +
  geom_col() +
  geom_bar_text() +
  labs(
    x = "User-Aktion",
    y = "Aktion",
    title = "Anzahl der User-Aktionen nach Kategorie"
  ) +
  theme_minimal() +
  scale_x_continuous(labels = scales::comma)
```


### Log-Skalierung

```{r vis-count-action-type-log}
#| fig-width: 9
count_action_type |> 
  count(category, sort = TRUE) |> 
  ggplot(aes(y = reorder(category, n), x = n)) +
  geom_col() +
  geom_bar_text() +
  labs(
    x = "Anazhl der User-Aktionen",
    y = "Aktion",
    title = "Anzahl der User-Aktionen nach Kategorie",
    caption = "Log10-Skala"
  ) +
  theme_minimal() +
  scale_x_log10()
```



# An welchen Tagen und zu welcher Zeit kommen die User zu HaNS?

## Setup

```{r}
tar_load(time_visit_wday)
```


```{r}
# Define a vector with the names of the days of the week
# Note: Adjust the start of the week (Sunday or Monday) as per your requirement
days_of_week <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")

# Replace numbers with day names
time_visit_wday$dow2 <- factor(days_of_week[time_visit_wday$dow],
                               levels = days_of_week)
```



## HaNS-Login nach Uhrzeit

```{r vis-hans-login-hour}
time_visit_wday |> 
  as_tibble() |> 
  count(hour) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  theme_minimal() +
  labs(
    title = "HaNS-Nutzer sind keine Frühaufsteher",
    x = "Uhrzeit",
    y = "Anteil"
  )
 # coord_polar()
```




```{r vis-hans-login-hour-polar}
time_visit_wday |> 
  as_tibble() |> 
  count(hour) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  theme_minimal() +
  coord_polar()
```



## Verteilung der HaNS-Besuche nach Wochentagen



```{r vis-hans-login-wday-bar}
time_visit_wday |> 
  as_tibble() |> 
  count(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = dow2, y = prop)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen",
       x = "Wochentag",
       y = "Anteil")
 # coord_polar()
```




```{r vis-hans-login-wday-polar}
time_visit_wday |> 
  as_tibble() |> 
  count(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = dow2, y = prop)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen",
       x = "Wochentag",
       y = "Anteil")  +
  coord_polar()
```


### HaNS-Login nach Wochentagen Uhrzeit




```{r vis-hans-login-wday-hour}
time_visit_wday |> 
  as_tibble() |> 
  count(dow2, hour) |> 
  group_by(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  facet_wrap(~ dow2) +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen und Uhrzeiten",
       x = "Wochentag",
       y = "Anteil")
 # coord_polar()
```



```{r vis-hans-login-wday-hour-polar}
#| fig-width: 9
#| fig-asp: 1.5
time_visit_wday |> 
  as_tibble() |> 
  count(dow2, hour) |> 
  group_by(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  facet_wrap(~ dow2) +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen und Uhrzeiten",
       x = "Wochentag",
       y = "Anteil") +
  coord_polar()
```

## Anzahl der Visits nach Datum (Tagen) und Uhrzeit (bin2d)

```{r}
time2 <- 
time_visit_wday |> 
  ungroup() |> 
  mutate(date = as.Date(date_time))

time2 |> 
  ggplot(aes(x = date, y = hour)) +
  geom_bin2d(binwidth = c(1, 1)) + # (1 day, 1 hour)
  scale_x_date(date_breaks = "1 month") +
  theme(legend.position = "bottom") +
  scale_fill_viridis_c() +
  labs(caption = "Each x-bin maps to one week")
 
```


## Anzahl der Visits nach Datum (Wochen) und Uhrzeit (bin2d)


```{r}
time2 |> 
  ggplot(aes(x = date, y = hour)) +
  geom_bin2d(binwidth = c(7, 1)) +  # 1 week, 1 hour
  scale_x_date(date_breaks = "1 week", date_labels = "%W") +
  theme(legend.position = "bottom") +
  scale_fill_viridis_c()  +
  labs(x = "Week number in 2023/2024",
       caption = "Each x-bin maps to one week")
```

## Anzahl der Visits nach Datum (Wochen) und Wochentag (bin2d)





```{r p-visits-day-wday}
time2 |> 
  ggplot(aes(x = date, y = dow)) +
  geom_bin2d(binwidth = c(7, 1)) +  # 1 week, 1 hour
  scale_x_date(date_breaks = "1 week", date_labels = "%W") +
  theme(legend.position = "bottom") +
  scale_fill_viridis_c()  +
  labs(x = "Week number in 2023/2024",
       caption = "Each x-bin maps to one week",
       y = "Day of Week") +
  scale_y_continuous(breaks = 1:7)
```



# KI-Gebrauch


## Interaktion mit dem LLM

### Art und Anzahl der Interaktionen mit dem LLM

```{r}
data_slim |> 
  filter(type == "eventcategory") |> 
  filter(str_detect(value, "llm")) |> 
  count(value, sort = TRUE) |> 
  mutate(prop = n / round(sum(n), 2)) |> 
  gt()
```


### Anteil Visitors, die mit dem LLM interagieren

```{r}
data_slim |> 
  mutate(has_llm = str_detect(value, "llm"))  |> 
  group_by(idvisit) |> 
  summarise(llm_used_during_visit = any(has_llm == TRUE)) |> 
  count(llm_used_during_visit) |> 
  mutate(prop = round(n /sum(n), 2)) |> 
  gt()
```


### ... Im Zeitverlauf


```{r}
tar_load(idvisit_has_llm)

idvisit_has_llm |> 
  count(year_month, uses_llm) |> 
  ungroup() |> 
  group_by(year_month) |> 
  mutate(prop = round(n/sum(n), 2)) |> 
  gt()
```


```{r}
idvisit_has_llm |> 
  count(year_month, uses_llm) |> 
  ungroup() |> 
  group_by(year_month) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = year_month, y = prop, color = uses_llm, groups = uses_llm)) +
  geom_point() +
  geom_line(aes(group = uses_llm)) +
  labs(title = "Visitors, die mit dem LLM interagieren im Zeitverlauf (Anteile)")
```


```{r}
idvisit_has_llm |> 
  count(year_month, uses_llm) |> 
  ungroup() |> 
  group_by(year_month) |> 
  ggplot(aes(x = year_month, y = n, color = uses_llm, groups = uses_llm)) +
  geom_point() +
  geom_line(aes(group = uses_llm)) +
  labs(title = "Visitors, die mit dem LLM interagieren im Zeitverlauf (Anzahl)")
```

## Klick auf ein Wort im Transkript


```{r}
tar_load(data_slim)
```


```{r ai-click-transcript-word}
data_slim |> 
  filter(type == "subtitle") |> 
  filter(!is.na(value) & value != "") |> 
  count(click_transcript_word = str_detect(value, "click_transcript_word")) |> 
  mutate(prop = round(n/sum(n), 2)) |> 
  gt()
```






## KI-Aktionen

### Insgesamt (ganzer Zeitraum)

```{r}
tar_load(data_long)
```


#### Im Detail

```{r ai-actions-count}
ai_actions_count <- 
  data_long |> 
  filter(str_detect(value, "transcript")) |> 
  count(value) 

ai_actions_count |> 
  gt()
```

#### Zusammengefasst nach "click transcript word"

```{r}
ai_actions_count |> 
  mutate(value = case_when(
    str_detect(value, "click_transcript_word.*") ~ "click transcript word",
    TRUE ~ value
  )) |> 
  count(value, sort = TRUE) |> 
  gt()
```







### KI-Klicks pro Monat

```{r}
tar_load(ai_transcript_clicks_per_month)
```



```{r  ai-click-transcript-word-months}
ai_transcript_clicks_per_month |> 
  count(year_month, clicks_transcript_any) |> 
  ungroup() |> 
  group_by(year_month) |> 
  mutate(prop = round(n/sum(n), 2)) |> 
  gt()
```


