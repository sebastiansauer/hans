---
title: "Analyse der Matoma-HaNS-Daten"
date: now
author: Sebastian Sauer

toc: true
number-sections: true

format: 
  html:
    theme: lumen
    embed-resources: true
    toc: true
    toc-location: right
    toc-depth: 3
    number-sections: true
    code-fold: true
    code-summary: "Show the code"
    code-tools: true
    
execute: 
  warning: false
  cache: true
  
params:
   recompute_gt: false
---


# Hintergrund


Dieser Arbeitsbericht schildert das technische Vorgehen im Rahmen der Analyse der Matomo-Daten des BMBF-Projekt "HaNS".

## Vorgehen

Die Matomo-Klickdaten aller Semester der Projektlaufzeit wurden für diese Analyse verarbeitet. Mit Hilfe einer R-Pipeline wurden eine Reihe von Forschungsfragen analysiert.

Der komplette Code ist online dokumentiert unter <https://github.com/sebastiansauer/hans>.
Aus Datenschutzgründen sind online keine Daten eingestellt.

Die zentrale Analyse-Pipeline-Datei ist <https://github.com/sebastiansauer/hans/blob/main/_targets.R>.


## Forschungsfragen


1. Wie viele Nutzer gibt es und in welchem Zeitraum?
2. In welcher Frequenz wird HaNS aufgesucht? Wie groß sind die zeitlichen Zwischenräume zwischen der Benutzung der Plattform?
3. Wie oft wird HaNS pro Zeitraum (z.B. Monat) besucht?
4. Wie verändert sich die Nutzung im Zeitverlauf?
5. Wie viele Aktionen bringt ein Visit mit sich? Wie ist die statistische Verteilung der Aktionen pro Visit?
6. Wie lang verweilen die Nutzer pro Visit?
7. Wie verändert sich die Nutzungsdauer pro Visit im Zeitverlauf?
8. Welche Aktionen führen die Nutzer auf Hans aus?
9. Wie verändern sich die Verteilungen der Aktionshäufigkeiten im Zeitverlauf?
10. An welchen Tagen und zu welcher Zeit kommen die User zu HaNS?
11. Wie häufig und in welcher Art inteagieren die Nutzer mit dem LLM in HaNS?
12. Wie groß ist der Anteil der Nutzer, die mit dem LLM interagieren?
13. Wie verändert sich der Anteil der Nutzer, die mit dem LLM interagieren, im Zeitverlauf?
14. Wie oft wird auf ein Wort im Transkript des LLM geklickt?
15. Wie oft wird ein Transkript-Dienst in HaNS in Anspruch genommen?
16. Wie verändert sich die Nutzung der Transkript-Dienste in HaNS im Zeitverlauf?
17. Wie lange werden Videos angeschaut?
18. Wie verändert sich die Betrachtungsdauer im Zeitverlauf?




# Setup

## R-Pakete starten



```{r load-libs}
library(targets)
library(tidyverse)
library(ggokabeito)
library(easystats)
library(gt)
library(ggfittext)
library(scales)
library(visdat)
library(collapse)
library(ggpubr)
library(knitr)
```

```{r}
theme_set(theme_minimal())
```


## Optionen setzen

```{r options}
options(lubridate.week.start = 1)  # Monday as first day
#options(collapse_mask = "all") # use collapse for all dplyr operations
options(chromote.headless = "new")  # Chrome headleass needed for gtsave
```

Immer `knitr::kable` für das Zeigen von Data frames verwenden:


<!-- ```{r setup-kable, include=FALSE} -->
<!-- knitr::opts_chunk$set( -->
<!--   print.opts = list(use.kable = TRUE) -->
<!-- ) -->
<!-- ``` -->


# Datenaufbereitung und Analysepipeline


## Targets-Pipeline stellt Überblick aller Analyseschritte dar

Die Analyse wird im Rahmen einer [Targets-Pipeline](https://github.com/sebastiansauer/hans/blob/main/_targets.R) beschrieben und ist offen auf Github einsehbar. 


## Langformat

Aufgrund des "rechts flatternden" Datenformat (d.h. unterschiedliche Zeilenlängen) wurden die Daten in ein Langformat überführt, zwecks besserer/einfacherer Analyse.

Dazu wurden (neben den ID-Variablen, v.a. `idvisit`) die `actionDetails_`-Variablen verwendet.
Der Code des Pivotierens in das Langformat ist in der Funktion [longify-data.R](https://github.com/sebastiansauer/hans/blob/main/funs/longify-data.R) einsehbar.


Die Daten im Langformat wurden dann noch etwas aufbereitet mt der Funktion [slimify-data.R](https://github.com/sebastiansauer/hans/blob/main/funs/slimify_data.R).

```{r data_slim_filtered_head}
tar_load(data_slim_filtered_head)

data_slim_filtered_head |> 
  head(30) |> 
  kable()
```




# Überblick über die Daten

## Roh-Daten laden und inspizieren (data_all_fact)






```{r load-data-all-f}
tar_load(data_all_fct)
```


### Dimension

Der Roh-Datensatz verfügt über

- `r nrow(data_all_fct)` Zeilen
- `r ncol(data_all_fct)` Spalten (Dubletten und Spalten mit Bildern bereits entfernt)

Jede Zeile entspricht einem "Visit".


### Erster Blick


```{r data_all_fct_head100}
data_all_fct_head100 <- 
data_all_fct %>% 
  select(1:100) %>% 
  slice_head(n = 100) 
```


```{r vis-dat}
data_all_fct_head100 %>% 
  visdat::vis_dat()
```


### Namen (1-100)



```{r data_all_fct_head100-2}
data_all_fct_head100 %>% 
  names()
```



### Werte der erst 100 Spalten


```{r}
data_all_fct_head100 %>% 
  glimpse()
```




### Datensatz data_slim_filtered, Zeilen 1-100

```{r data_slim_filtered}
tar_load(data_slim_filtered)

data_slim_filtered %>% 
  slice(1:100) |> 
  gt()
```


# Datensatz nur User

Entfernt man Developer, Admins und Lecturers aus dem Roh-Datensatz so bleiben weniger Zeilen übrig:



```{r load-data-users-only}
tar_load(data_users_only)
data_users_only |> 
  head(30) |> 
  kable()
```


- `r nrow(data_users_only)` Zeilen
- `r ncol(data_users_only)` Spalten 


  

# Datensatz mit Anzahl der Aktionen pro User

```{r load-count-action}
tar_load(count_action)

count_action |> 
  head(30) |> 
  kable()
```


# Zeitraum


## Beginn/Ende der Daten


```{r load-config}
tar_load(config)
```


```{r time_minmax-load}
tar_load(time_minmax)

time_minmax |> 
  head(30) |> 
  kable()
```


```{r comp-time-min-max}
time_minmax |> 
  summarise(time_min = min(time_min, na.rm = T),
            time_max = max(time_max, na.rm = T)) |> 
  gt()
```

Diese Statistik wurde auf Basis des Datenobjekts `data_slim_filtered` berechnet,
vgl. [das Target dieses Objekts in der Pipeline](https://github.com/sebastiansauer/hans/blob/main/_targets.R#L170).




## Days since last visit

```{r load-time-objs}
tar_load(time_visit_wday)
tar_load(time_since_last_visit)
```


```{r}
time_visit_wday |> 
  head(30) |> 
  kable()
```


```{r days-since-last-visit}
time_since_last_visit <- 
time_since_last_visit |> 
  mutate(dayssincelastvisit = as.numeric(dayssincelastvisit)) 

time_since_last_visit |> 
  datawizard::describe_distribution(dayssincelastvisit) |> 
  knitr::kable(digits = 2)

time_since_last_visit |>
  ggplot(aes(x=dayssincelastvisit)) +
  geom_density()
```



## Visits im Zeitverlauf

Wie viele Visits (von Hans) gab es?


### Pro Monat


```{r time_visit_wday_summary}
time_visit_wday_summary <- 
time_visit_wday |> 
  ungroup() |> 
  mutate(month_start = floor_date(date_time, "month")) |> 
  mutate(month_name = month(date_time, label = TRUE, abbr = FALSE),
         month_num = month(date_time, label = FALSE),
         year_num = year(date_time)) |> 
  group_by(year_num, month_num) |> 
  summarise(n = n())
```


```{r}
time_visit_wday_summary |> 
  gt()
```

```{r time_visit_wday_summary2}
time_visit_wday_summary2 <- 
time_visit_wday |> 
  ungroup() |> 
  mutate(month_start = floor_date(date_time, "month")) |> 
  mutate(month_name = month(date_time, label = TRUE, abbr = FALSE),
         month_num = month(date_time, label = FALSE),
         year_num = year(date_time)) |> 
  group_by(year_num, month_start) |> 
  summarise(n = n())


time_visit_wday_summary2 |> 
  ggplot(aes(x = month_start, y = n)) +
  geom_line(group = 1, color = "grey60") +
  geom_point() 
```


### Akkumulierte Seitenaufrufe im Zeitverlauf

```{r}
time_visit_wday_summary2 <- 
time_visit_wday |> 
  ungroup() |> 
  mutate(month_start = floor_date(date_time, "month")) |> 
  mutate(month_name = month(date_time, label = TRUE, abbr = FALSE),
         month_num = month(date_time, label = FALSE),
         year_num = year(date_time)) |> 
  group_by(year_num, month_start) |> 
  summarise(n = n()) |> 
  ungroup() |> 
  mutate(n_cumsum = cumsum(n))


time_visit_wday_summary2 |> 
  ggplot(aes(x = month_start, y = n_cumsum)) +
  geom_line(group = 1, color = "grey60") +
  geom_point() 
```


## Statistiken

Die folgenden Statistiken beruhen auf dem Datensatz `data_slim_filtered`:


```{r}
glimpse(data_slim_filtered)
```

`nr` fasst die Nummer der Aktion innerhalb eines bestimmten Visits.


## Mit allen Daten (den 499er-Daten)



```{r tbl_count_action}
tbl_count_action <- 
count_action |> 
  describe_distribution(nr_max) |> 
  gt() |> 
  fmt_number(columns = where(is.numeric),
             decimals = 2)

tbl_count_action
```


```{r}
#| eval: !expr params$recompute_gt
gtsave(tbl_count_action, filename = "reports/tbl_count_action.png")
```


![](reports/tbl_count_action.png)



`nr_max` gibt den Maximalwert von `nr` zurück, sagt also, wie viele Aktionen maximal von einem Visitor ausgeführt wurden.

Betrachtet man die Anzahl der Aktionen pro Visitor näher, so fällt auf, dass der Maximalwert (499) sehr häufig vorkommt:

```{r count-action-plot}
count_action |> 
  count(nr_max) |> 
  ggplot(aes(x = nr_max, y = n)) +
  geom_col()
```

Hier noch in einer anderen Darstellung:

```{r count-action-plot2}
count_action |> 
  count(nr_max) |> 
  ggplot(aes(x = nr_max, y = n)) +
  geom_point()
```

Der Maximalwert ist einfach auffällig häufig:


```{r}
count_action |> 
  count(nr_max == 499) |> 
  gt()
```


Es erscheint plausibel, dass der Maximalwert alle "gekappten" (*zensierten*, abgeschnittenen) Werte fasst, 
also viele Werte, die eigentlich größer wären (aber dann zensiert wurden).

## Nur Visitors, für die weniger als 500 Aktionen protokolliert sind


```{r count-action-tbl2}
count_action2 <- 
count_action |> 
  filter(nr_max != 499) 

count_action2 |> 
  describe_distribution(nr_max) |> 
  gt() |> 
  fmt_number(columns = where(is.numeric),
             decimals = 2)
```

## Verteilung

## Mit den 499er-Daten

```{r plot-count-action}
count_action_avg = mean(count_action$nr_max)
count_action_sd = sd(count_action$nr_max)

count_action |> 
  ggplot() +
  geom_histogram(aes(x = nr_max)) +
  labs(x = "Anzahl von Aktionen pro Visit",
       y = "n",
       caption = "Der vertikale Strich zeigt den Mittelwert; der horizontale die SD") +
  theme_minimal() +
  geom_vline(xintercept = count_action_avg,
             color = palette_okabe_ito()[1]) +
  geom_segment(x = count_action_avg-count_action_sd,
               y = 0,
               xend = count_action_avg + count_action_sd,
               yend = 0,
               color = palette_okabe_ito()[2],
               size = 2) +
  annotate("label", x = count_action_avg, y = 1500, label = "MW") +
  annotate("label", x = count_action_avg + count_action_sd, y = 0, label = "SD")
  #geom_label(aes(x = count_action_avg), y = 1, label = "Mean")
```



- Mittelwert der Aktionen pro Visit: `r round(count_action_avg, 2)`.
- SD der Aktionen pro Visit: `r round(count_action_sd, 2)`.


## Ohne 499er-Daten

```{r plot-count-action-2}
count_action_avg2 = mean(count_action2$nr_max)
count_action_sd2 = sd(count_action2$nr_max)

count_action2 |> 
  ggplot() +
  geom_histogram(aes(x = nr_max)) +
  labs(x = "Anzahl von Aktionen pro Visit",
       y = "n",
       title = "Verteilung der User-Aktionen pro Visit",
       caption = "Der vertikale Strich zeigt den Mittelwert; der horizontale die SD") +
  theme_minimal() +
  geom_vline(xintercept = count_action_avg2,
             color = palette_okabe_ito()[1]) +
  geom_segment(x = count_action_avg-count_action_sd2,
               y = 0,
               xend = count_action_avg2 + count_action_sd2,
               yend = 0,
               color = palette_okabe_ito()[2],
               size = 2) +
  annotate("label", x = count_action_avg2, y = 1500, label = "MW", vjust = "top") +
  annotate("label", x = count_action_avg2 + count_action_sd2, y = 0, label = "SD", vjust = "bottom")
  #geom_label(aes(x = count_action_avg), y = 1, label = "Mean")
```



- Mittelwert der Aktionen pro Visit: `r round(count_action_avg2, 2)`.
- SD der Aktionen pro Visit: `r round(count_action_sd2, 2)`.








# Verweildauer pro Visit 

## Berechnungsgrundlage der Verweildauer

Die Verweildauer wurde berechnet als Differenz zwischen kleinstem und größtem Datumszeitwert (POSixct) eines Visits, vgl. [Funktion `diff_time](https://github.com/sebastiansauer/hans/blob/main/funs/diff_time.R).
Diese Variable heißt `time_diff` im Objekt `time_spent`.

Dabei wird das Objekt `data_slim_filtered` herangezogen, vgl. [die Definition es Targets "time_spent" in der Targets-Pipeline](https://github.com/sebastiansauer/hans/blob/main/_targets.R#L205).

```{r data_slim_filtered2}
tar_load(data_slim_filtered)
head(data_slim_filtered, 20) |> kable()
```



## Vorverarbeitung

Die Visit-Zeit wurde auf 600 Min. trunkiert/begrenzt.

```{r time_spent-duration}
tar_load(time_spent)
tar_load(time_duration)
```


```{r}
time_spent |> 
  head(30) |> 
  kable()
```


```{r load-time-spent}
time_spent <- 
  time_spent |> 
  # compute time (t) in minutes (min):
  mutate(t_min = as.numeric(time_diff, units = "mins")) |> 
  filter(t_min < 600)
```

## Verweildauer-Statistiken in Sekunden 

Die Verweildauer ist dargestellt auf Grundlage oben dargestellter Berechnungsgrundlage.


```{r comp-diff-time-stats}
time_spent |> 
  summarise(
    mean_time_diff = round(mean(time_diff), 2),
    sd_time_diff = sd(time_diff),
    min_time_diff = min(time_diff),
    max_time_diff = max(time_diff)
  ) |> 
  summarise(
    mean_time_diff_avg = mean(mean_time_diff),
    sd_time_diff_avg = mean(sd_time_diff, na.rm = TRUE),
    min_time_diff_avg = mean(min_time_diff),
    max_time_diff_avg = mean(max_time_diff)
  ) |> 
  gt() |> 
  fmt_number(columns = everything(),
             decimals = 2)
```


## Verweildauer auf Basis der Variable `visitduration``

Alternativ zur Berechnung der Verweildauer steht eine Variable, `visitduration` zur Verfügung, die (offenbar) die Dauer des Visits misst bzw. messen soll.

Allerdings resultieren substanziell andere Werte,
wenn man diese Variable heranzieht zur Berechnung der Verweildauer,
vgl. [Target `time_duration` in der Targets-Pipeline](https://github.com/sebastiansauer/hans/blob/main/_targets.R#L211).


```{r}
time_duration |> 
  head(30) |> 
  kable()
```



```{r time-duration}
time_duration |> 
  summarise(duration_sec_avg = mean(visitduration_sec, na.rm = TRUE))  |> 
  mutate(duration_min_avg = duration_sec_avg / 60) |> 
  kable()
```



## Verweildauer-Statistiken in Minuten

```{r time-spent-tbl}
time_spent_summary <- 
time_spent |> 
  summarise(
    mean_t_min = mean(t_min),
    sd_t_min = sd(t_min),
    min_t_min = min(t_min),
    max_t_min = max(t_min)
  ) |> 
   summarise(
    mean_t_min_avg = mean(mean_t_min),
    sd_t_min_avg = mean(sd_t_min, na.rm = TRUE),
    min_t_min_avg = mean(min_t_min),
    max_t_min_avg = mean(max_t_min)
  )

time_spent_summary |> 
  gt() |> 
  fmt_number(columns = everything(),
             decimals = 2)
```

```{r}
small_padding_theme <- ggpubr::ttheme(
  tbody.style = tbody_style(size = 8), # Smaller font size can help
  colnames.style = colnames_style(size = 9, face = "bold"),
  padding = unit(c(2, 2), "mm") # Reduce horizontal and vertical padding
)
```


```{r}
ggpubr::ggtexttable(time_spent_summary,
                    rows = NULL,
                    theme = small_padding_theme)
```


## Visualisierung der Verweildauer

### bins=20

```{r plot-time-spent1}
time_spent |> 
  ggplot(aes(x = t_min)) +
  geom_histogram() +
  scale_x_time() +
  theme_minimal() +
  labs(y = "n",
       x = "Verweildauer in HaNS pro Visit in Minuten")
```



### bins=100

```{r plot-time-spent2}
time_spent |> 
  ggplot(aes(x = t_min)) +
  geom_histogram(binwidth = 5) +
  theme_minimal() +
  labs(y = "n",
       x = "Verweildauer in Minuten",
       title = "Verweildauer in HaNS pro Visit",
       caption = "binwidth = 5 Min.")
```

### Zeitdauer begrenzt auf 1-120 Min.

```{r plot-time-spent3}
time_spent2 <- 
time_spent |> 
  filter(t_min > 1, t_min < 120) 

time_spent2 |> 
  ggplot(aes(x = t_min)) +
  geom_histogram(binwidth = 10) +
  theme_minimal() +
  labs(y = "n",
       x = "Verweildauer in HaNS pro Visit in Minuten",
       title = "Verweildauer begrenzt auf 1-120 Minuten",
       caption = "bindwidth = 10 Min.")
```



### Veränderung der Verweildauer im Zeitverlauf


```{r}
time_spent_by_month <-
  time_spent |> 
  mutate(date = ymd_hms(value)) |> 
  mutate(month_start = floor_date(date, "month")) |> 
  mutate(month_name = month(month_start, label = TRUE, abbr = FALSE),
         month_num = month(month_start, label = FALSE),
         year = year(month_start)) |> 
  group_by(month_num, year) |> 
  summarise(time_spent_month_avg = mean(t_min, na.rm = TRUE),
            time_spent_month_sd = sd(t_min, na.rm = TRUE)) |> 
  arrange(year, month_num)

time_spent_by_month |> 
  gt() |> 
  fmt_auto()
```


```{r time_spent_by_month}
time_spent_by_month |> 
  mutate(time_spent_month_avg = round(time_spent_month_avg, 2),
         time_spent_month_sd = round(time_spent_month_sd, 2)) |> 
  ggtexttable()
```


```{r time_spent_by_month_name}
time_spent_by_month_name <- 
time_spent |> 
  mutate(date = ymd_hms(value)) |> 
  mutate(month_start = floor_date(date, "month")) |> 
  mutate(month_name = month(month_start, label = TRUE, abbr = FALSE),
         month_num = month(month_start, label = FALSE),
         year = year(month_start)) |> 
  group_by(month_start, year) |> 
  summarise(time_spent_month_avg = mean(t_min, na.rm = TRUE),
            time_spent_month_sd = sd(t_min, na.rm = TRUE))

time_spent_by_month_name |> 
ggplot(aes(x = month_start, y = time_spent_month_avg)) +
  geom_line(group = 1, color = "grey60") +
    geom_point() 
```







# Was machen die User?


Was machen die Visitors eigentlich? Und wie oft?

## Häufigkeiten

```{r tar-load-count-action-type}
tar_load(count_action_type)
```


Für das Objekt `count_action_type` wurde die Spalte `subtitle` in den Langformat-Daten ausgewertet, s. [Funktionsdefinition von `count_user_action_type`](https://github.com/sebastiansauer/hans/blob/main/funs/count_user_action.R).


```{r}
count_action_type |> 
  head(30)
```



Achtung: Es kann sinnvoller sein,
alternativ zu dieser Analyse
die Analyse auf Basis von `eventcategory` heranzuziehen.
Dort werden alle Arten von Events berücksichtigt. 
Hier, in der vorliegenden, nur ausgewählte Events.


### Nach bestimmten Kategorien

```{r category-tab}
count_action_type_counted <- 
count_action_type |> 
  drop_na() |> 
  count(category, sort = TRUE) |> 
  mutate(prop = round(n/sum(n), 2)) 

count_action_type_counted |> 
  gt()
```


### Nach Kategorien im Zeitverlauf

```{r}
count_action_type_per_month <- 
count_action_type |> 
  select(nr, idvisit, category) |> 
  ungroup() |> 
  left_join(time_visit_wday |> ungroup()) |> 
  select(-c(dow, hour, nr)) |> 
  drop_na() |> 
  mutate(month_start = floor_date(date_time, "month")) |> 
  count(month_start, category)
```

```{r}
count_action_type_per_month |> 
  gt()
```

### Nur die Top3-Kategorien

```{r time_visit_wday}
tar_load(time_visit_wday)
```


```{r}
time_visit_wday |> 
  head(30) |> 
  kable()
```


```{r count_action_type_per_month_top3}
count_action_type_per_month_top3 <- 
count_action_type |> 
  select(nr, idvisit, category) |> 
  ungroup() |> 
  filter(category %in% c("video", "click_slideChange", "visit_page")) |> 
  left_join(time_visit_wday |> ungroup()) |> 
  select(-c(dow, hour, nr)) |> 
  drop_na() |> 
  mutate(month_start = floor_date(date_time, "month")) |> 
  count(month_start, category)
```

```{r count_action_type_per_month_top3-gt}
count_action_type_per_month_top3 |> 
  gt()
```


```{r count_action_type_per_month_top3-ggplot}
count_action_type_per_month_top3 |> 
  ggplot(aes(x = month_start, y = n, color = category, group = category)) +
  geom_line()
```


### `eventcategory`

Für folgende Analyse wurde eine andere Variable als oben herangezogen, nämlich `eventcategory`. Dadurch resultieren etwas andere Ergebnisse.


```{r data_slim_filtered_count}
data_slim_filtered_count <- 
data_slim_filtered |> 
  filter(type == "eventcategory") |> 
  count(value, sort = TRUE) 

data_slim_filtered_count |> 
  gt()
```

```{r}
data_slim_filtered_count |> 
  ggtexttable()
```

Als Excel-Datei abspeichern:

```{r}
data_slim_filtered_count |> 
  writexl::write_xlsx(path = "obj/data_slim_filtered_count.xlsx")
```


## Verteilung

### Rohwerte

```{r vis-count-action-type}
count_action_type |> 
  count(category, sort = TRUE) |> 
  ggplot(aes(y = reorder(category, n), x = n)) +
  geom_col() +
  geom_bar_text() +
  labs(
    x = "User-Aktion",
    y = "Aktion",
    title = "Anzahl der User-Aktionen nach Kategorie"
  ) +
  theme_minimal() +
  scale_x_continuous(labels = scales::comma)
```


### Log-Skalierung

```{r vis-count-action-type-log}
#| fig-width: 9
count_action_type |> 
  count(category, sort = TRUE) |> 
  ggplot(aes(y = reorder(category, n), x = n)) +
  geom_col() +
  geom_bar_text() +
  labs(
    x = "Anazhl der User-Aktionen",
    y = "Aktion",
    title = "Anzahl der User-Aktionen nach Kategorie",
    caption = "Log10-Skala"
  ) +
  theme_minimal() +
  scale_x_log10()
```



# An welchen Tagen und zu welcher Zeit kommen die User zu HaNS?

## Setup


```{r}
# Define a vector with the names of the days of the week
# Note: Adjust the start of the week (Sunday or Monday) as per your requirement
days_of_week <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")

# Replace numbers with day names
time_visit_wday$dow2 <- factor(days_of_week[time_visit_wday$dow],
                               levels = days_of_week)
```



## HaNS-Login nach Uhrzeit

```{r vis-hans-login-hour}
time_visit_wday |> 
  as_tibble() |> 
  count(hour) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  theme_minimal() +
  labs(
    title = "HaNS-Nutzer sind keine Frühaufsteher",
    x = "Uhrzeit",
    y = "Anteil"
  )
 # coord_polar()
```




```{r vis-hans-login-hour-polar}
time_visit_wday |> 
  as_tibble() |> 
  count(hour) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  theme_minimal() +
  coord_polar()
```



## Verteilung der HaNS-Besuche nach Wochentagen



```{r vis-hans-login-wday-bar}
time_visit_wday |> 
  as_tibble() |> 
  count(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = dow2, y = prop)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen",
       x = "Wochentag",
       y = "Anteil")
 # coord_polar()
```




```{r vis-hans-login-wday-polar}
time_visit_wday |> 
  as_tibble() |> 
  count(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = dow2, y = prop)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen",
       x = "Wochentag",
       y = "Anteil")  +
  coord_polar()
```


### HaNS-Login nach Wochentagen Uhrzeit




```{r vis-hans-login-wday-hour}
time_visit_wday |> 
  as_tibble() |> 
  count(dow2, hour) |> 
  group_by(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  facet_wrap(~ dow2) +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen und Uhrzeiten",
       x = "Wochentag",
       y = "Anteil")
 # coord_polar()
```



```{r vis-hans-login-wday-hour-polar}
#| fig-width: 9
#| fig-asp: 1.5
time_visit_wday |> 
  as_tibble() |> 
  count(dow2, hour) |> 
  group_by(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  facet_wrap(~ dow2) +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen und Uhrzeiten",
       x = "Wochentag",
       y = "Anteil") +
  coord_polar()
```

## Anzahl der Visits nach Datum (Tagen) und Uhrzeit (bin2d)

```{r}
time2 <- 
time_visit_wday |> 
  ungroup() |> 
  mutate(date = as.Date(date_time))

time2 |> 
  ggplot(aes(x = date, y = hour)) +
  geom_bin2d(binwidth = c(1, 1)) + # (1 day, 1 hour)
  scale_x_date(date_breaks = "1 month") +
  theme(legend.position = "bottom") +
  scale_fill_viridis_c() +
  labs(caption = "Each x-bin maps to one week")
 
```


## Anzahl der Visits nach Datum (Wochen) und Uhrzeit (bin2d)


```{r}
time2 |> 
  ggplot(aes(x = date, y = hour)) +
  geom_bin2d(binwidth = c(7, 1)) +  # 1 week, 1 hour
  scale_x_date(date_breaks = "1 week", date_labels = "%W") +
  theme(legend.position = "bottom") +
  scale_fill_viridis_c()  +
  labs(x = "Week number in 2023/2024",
       caption = "Each x-bin maps to one week")
```

## Anzahl der Visits nach Datum (Wochen) und Wochentag (bin2d)





```{r p-visits-day-wday}
time2 |> 
  ggplot(aes(x = date, y = dow)) +
  geom_bin2d(binwidth = c(7, 1)) +  # 1 week, 1 hour
  scale_x_date(date_breaks = "1 week", date_labels = "%W") +
  theme(legend.position = "bottom") +
  scale_fill_viridis_c()  +
  labs(x = "Week number in 2023/2024",
       caption = "Each x-bin maps to one week",
       y = "Day of Week") +
  scale_y_continuous(breaks = 1:7)
```



# KI-Gebrauch


## Interaktion mit dem LLM

Berechnungsgrundlage: Für diese Analyse wurden alle Events der Kategorie `llm` gefiltert.

### Art und Anzahl der Interaktionen mit dem LLM



```{r}
data_slim_filtered_ai <- 
data_slim_filtered |> 
  filter(type == "eventcategory") |> 
  filter(str_detect(value, "llm")) |> 
  count(value, sort = TRUE) |> 
  mutate(prop = n / sum(n))

data_slim_filtered_ai |> 
  gt() |> 
  fmt_auto()
```

```{r}
data_slim_filtered_ai |> 
  mutate(prop = round(prop, 3)) |> 
  ggtexttable()
```



### Anteil Visitors, die mit dem LLM interagieren

```{r}
data_slim_filtered_llm_interact <- 
data_slim_filtered |> 
  mutate(has_llm = str_detect(value, "llm"))  |> 
  group_by(idvisit) |> 
  summarise(llm_used_during_visit = any(has_llm == TRUE)) |> 
  count(llm_used_during_visit) |> 
  mutate(prop = round(n /sum(n), 2)) 

data_slim_filtered_llm_interact|> 
  gt()
```

```{r}
data_slim_filtered_llm_interact |> 
  ggtexttable()
```



### ... Im Zeitverlauf

```{r}
tar_load(idvisit_has_llm)

idvisit_has_llm |> 
  head(30) |> 
  kable()
```


```{r}
idvisit_has_llm_timeline <- 
idvisit_has_llm |> 
  count(year_month, uses_llm) |> 
  ungroup() |> 
  group_by(year_month) |> 
  mutate(prop = round(n/sum(n), 2)) 

idvisit_has_llm_timeline|> 
  gt()
```

```{r}
idvisit_has_llm_timeline |> 
  ggtexttable()
```


```{r}
idvisit_has_llm |> 
  count(year_month, uses_llm) |> 
  ungroup() |> 
  group_by(year_month) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = year_month, y = prop, color = uses_llm, groups = uses_llm)) +
  geom_point() +
  geom_line(aes(group = uses_llm)) +
  labs(title = "Visitors, die mit dem LLM interagieren im Zeitverlauf (Anteile)")
```


```{r}
idvisit_has_llm |> 
  count(year_month, uses_llm) |> 
  ungroup() |> 
  group_by(year_month) |> 
  ggplot(aes(x = year_month, y = n, color = uses_llm, groups = uses_llm)) +
  geom_point() +
  geom_line(aes(group = uses_llm)) +
  labs(title = "Visitors, die mit dem LLM interagieren im Zeitverlauf (Anzahl)")
```

## Klick auf ein Wort im Transkript



```{r ai-click-transcript-word}
data_slim_filtered |> 
  filter(type == "subtitle") |> 
  filter(!is.na(value) & value != "") |> 
  count(click_transcript_word = str_detect(value, "click_transcript_word")) |> 
  mutate(prop = round(n/sum(n), 2)) |> 
  gt()
```






## KI-Aktionen

### Insgesamt (ganzer Zeitraum)

```{r}
tar_load(data_long)
```


```{r}
data_long |> 
  head(30)
```


#### Im Detail



```{r ai-actions-count}
regex_pattern <-  "Category: \"(.*?)(?=', Action)"

# Explaining this regex_pattern:
# Find the literal string 
# 1. `Category: ` (surrounded by quotation marks)
# 2. Capture any characters (.*?) that follow, non-greedily, until...
# 3. ...it encounters the literal sequence,  ` Action`) immediately after the captured string.

ai_actions_count <- 
  data_long |> 
 # slice(1:1000) |> 
  filter(str_detect(value, "transcript")) |> 
  mutate(category = str_extract(value, regex_pattern)) |> 
  select(category) |> 
  mutate(category = str_replace_all(category, "[\"']", "")) |> 
  count(category, sort = TRUE) 

ai_actions_count |> 
  gt()
```









### KI-Klicks pro Monat

Im Objekt wird gezählt, wie oft der String `"click_transcript_word"` in den Daten (Langformat) gefunden wird, s. Target `ai_transcript_clicks_per_month` in der Targets-Pipeline.



```{r}
tar_load(ai_transcript_clicks_per_month)

ai_transcript_clicks_per_month |> 
  head(30) |> 
  kable()
```



```{r ai-click-transcript-word-months}
ai_transcript_clicks_per_month_count <-
ai_transcript_clicks_per_month |> 
  count(year_month, clicks_transcript_any) |> 
  ungroup() |> 
  group_by(year_month) |> 
  mutate(prop = round(n/sum(n), 2)) 

ai_transcript_clicks_per_month_count|> 
  gt()
```


```{r}
ai_transcript_clicks_per_month_count |> 
  ggtexttable()
```


```{r ai_transcript_clicks_per_month_count-plot}
ai_transcript_clicks_per_month_count |> 
  mutate(date = ymd(paste0(year_month,"-01"))) |> 
  ggplot(aes(x = date, y = n)) +
  geom_line(group = 1) +
  geom_point()
```


# Videozeit

Wie viel Zeit verbringen die Nutzer mit dem Betrachten von Videos ("Glotzdauer")?


## Glotzdauer allgemein

Achtung: Die Videozeit ist schwierig auszuwerten.
Die Nutzer beenden keine Videos, in dem sie auf "Pause" drücken,
sondern indem sie andere Aktionen durchführen.
Dies ist aber analytisch schwer abzubilden.

```{r}
tar_load(glotzdauer)
```

Vgl. die Definition des Targets `glotzdauer` in der [Pipeline](https://github.com/sebastiansauer/hans/blob/main/_targets.R#L269).

Kurz gesagt wird die Zeit-Differenz zwischen zwei aufeinander folgenden "Play" und "Pause" Aktionen berechnet.

Allerdings hat dieses Vorgehen Schwierigkeiten: Nicht immer folgt auf einem "Play" ein "Pause". 
Es ist schwer auszuwerten, wann die Betrachtung eines Videos endet.
Daher ist diese Analyse nur vorsichtig zu interpretieren.

Die Definition [der Funktion glotzdauer.R](https://github.com/sebastiansauer/hans/blob/main/funs/glotzdauer.R) ist online dokumentiert.

```{r}
glotzdauer |> 
  head(30) |> 
  kable()
```

Für die folgende Darstellung wurden die *absoluten* Zeitwerte verwendet, d.h. ohne Vorzeichen.

```{r p-plotzdauer}
glotzdauer |> 
  # we will assume that negative glotzdauer is the as positive glotzdauer:
  mutate(time_diff = abs(time_diff)) |> 
  # without glotzdauer smaller than 10 minutes:
  filter(time_diff < 60*10) |> 
  ggplot(aes(x = time_diff)) +
  geom_histogram() +
  scale_x_time() +
  labs(x = "Time interval [minutes]",
       caption = "Only time intervals less than 10 minutes. It is assumed that video time is positive only (no negative time intervals).")
```



```{r glotzdauer-stats}

glotzdauer_prepped <- 
glotzdauer |> 
  # we will assume that negative glotzdauer is the as positive glotzdauer:
  mutate(time_diff_abs_sec = abs(as.numeric(time_diff, units = "secs"))) |> 
  # without glotzdauer smaller than 10 minutes:
  filter(time_diff_abs_sec < 60*10) |> 
  mutate(time_diff_abs_min = time_diff_abs_sec / 60) 

glotzdauer_tbl <- 
  glotzdauer_prepped |> 
  select(time_diff_abs_sec, time_diff_abs_min) |> 
  describe_distribution()

glotzdauer_tbl |> 
  kable()
```

```{r}
glotzdauer_tbl |>
  mutate(across(where(is.numeric), ~ round(., 2))) |>
  ggpubr::ggtexttable()
```



## Glotzdauer im Zeitverlauf

```{r}
glotzdauer_prepped_tbl <-
glotzdauer_prepped |> 
  mutate(first_of_month = floor_date(date, unit = "month")) |> 
  group_by(first_of_month) |> 
  summarise(time_diff_mean = mean(time_diff, na.rm = TRUE))
  

glotzdauer_prepped_tbl |> 
  kable()
```

```{r}
glotzdauer_prepped_tbl |> 
  ggplot(aes(x = first_of_month, y = time_diff_mean)) +
  geom_line()
```




